{"version":3,"sources":["services/validations.js","services/backend.js","ui-library/form/text-field/TextField.js","ui-library/spinner/Spinner.js","ui-library/form/button/Button.js","components/signup-form/SignupForm.js","components/signup/Signup.js","App.js","serviceWorker.js","index.js"],"names":["required","value","minLength","length","concat","API_HOST","process","signup","data","axios","post","TextField","props","id","label","form","className","formGroupClassName","error","inputOptions","Object","objectWithoutProperties","react_default","a","createElement","classNames","htmlFor","assign","Spinner","_ref","_ref$size","size","_ref$color","color","width","height","xmlns","viewBox","preserveAspectRatio","cx","cy","fill","stroke","strokeWidth","r","strokeDasharray","transform","attributeName","type","calcMode","values","keyTimes","dur","begin","repeatCount","Button","children","block","isLoading","buttonOptions","initialValues","email","username","password","repeatPassword","validate","errors","emailError","test","usernameError","cleanText","passwordError","repeatPasswordError","valueToEqual","passwordsMatch","keys","then","catch","e","errorsResponse","response","fields","key","hasOwnProperty","includes","message","toast","SignupForm","formik_esm","validateOnChange","onSubmit","setSubmitting","success","finally","touched","isSubmitting","handleChange","handleSubmit","name","placeholder","onChange","disabled","Signup","App","react_toastify","autoClose","hideProgressBar","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.29f548a5.chunk.js","sourcesContent":["export function required(value) {\r\n  if (!value) {\r\n    return 'Field is required'\r\n  }\r\n}\r\n\r\nexport function cleanText(value) {\r\n  const CLEAN_TEXT = /^[^`~!@#$%^&*()+=[{\\]}|\\\\'<,.>?\";:]+$/;\r\n  if (!CLEAN_TEXT.test(value)) {\r\n    return 'No special characters allowed'\r\n  }\r\n}\r\n\r\nexport function minLength(value, length) {\r\n  if (value.length < length) {\r\n    return `Min length have to be ${length}`;\r\n  }\r\n}\r\n\r\nexport function email(value) {\r\n  const EMAIL = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i;\r\n  if (!EMAIL.test(value)) {\r\n    return 'Invalid email address'\r\n  }\r\n}\r\n\r\nexport function passwordsMatch(value, valueToEqual) {\r\n  if (value !== valueToEqual) {\r\n    return 'Passwords does not match'\r\n  }\r\n}\r\n","import axios from 'axios';\r\n\r\nconst API_HOST = process.env.REACT_APP_API_HOST || 'http://localhost:3002/';\r\n\r\nexport const signup = (data) => {\r\n  return axios.post(API_HOST + 'signup', data);\r\n};\r\n\r\nexport const check = (data) => {\r\n  return axios.post(API_HOST + 'check', data);\r\n};\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\nimport './text-field.scss';\r\n\r\n\r\nexport default function TextField (props) {\r\n  const {\r\n    id,\r\n    form,\r\n    label,\r\n    className,\r\n    formGroupClassName,\r\n    error,\r\n    ...inputOptions\r\n  } = props;\r\n\r\n\r\n  return (\r\n    <div className={classNames('TextField-component', formGroupClassName)}>\r\n      <label htmlFor={id} className=\"label\">{ label }</label>\r\n      <input\r\n        id={id}\r\n        className={classNames(className, error && 'error')}\r\n        {...inputOptions}\r\n      />\r\n      { error && <div className=\"error-message\">{ error }</div> }\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport './spinner.scss';\r\n\r\n\r\nexport default function Spinner ({ size = 25, color = 'white' }) {\r\n\r\n  return <div className=\"Spinner-component\">\r\n    <svg width={size} height={size} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"\r\n         preserveAspectRatio=\"xMidYMid\" className=\"lds-rolling\">\r\n      <circle cx=\"50\" cy=\"50\" fill=\"none\" stroke={color}\r\n              strokeWidth=\"10\" r=\"30\" strokeDasharray=\"141.37166941154067 49.12388980384689\"\r\n              transform=\"rotate(341.799 50 50)\">\r\n        <animateTransform attributeName=\"transform\" type=\"rotate\" calcMode=\"linear\" values=\"0 50 50;360 50 50\"\r\n                          keyTimes=\"0;1\" dur=\"1s\" begin=\"0s\" repeatCount=\"indefinite\"></animateTransform>\r\n      </circle>\r\n    </svg>\r\n  </div>\r\n}\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\nimport Spinner from '../../spinner';\r\nimport './button.scss';\r\n\r\n\r\nexport default function Button (props) {\r\n  const {\r\n    children,\r\n    block,\r\n    className,\r\n    isLoading,\r\n    ...buttonOptions\r\n  } = props;\r\n\r\n\r\n  return (\r\n    <button\r\n      className={classNames('Button-component', block && 'block', className)}\r\n      {...buttonOptions}\r\n    >\r\n      <span>{ children }</span>&nbsp;\r\n      { isLoading && <Spinner /> }\r\n    </button>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { Formik } from 'formik';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport { required, email, cleanText, passwordsMatch, minLength } from '../../services/validations';\r\nimport { signup, check } from '../../services/backend';\r\nimport TextField from '../../ui-library/form/text-field';\r\nimport Button from '../../ui-library/form/button';\r\nimport './signup-form.scss';\r\n\r\nconst initialValues = {\r\n  email: '',\r\n  username: '',\r\n  password: '',\r\n  repeatPassword: ''\r\n};\r\n\r\nconst validate = values => {\r\n\r\n  // Client side validation\r\n  let errors = {};\r\n  let emailError = required(values.email) || email(values.email);\r\n  if (emailError) {\r\n    errors.email = emailError;\r\n  }\r\n  let usernameError = required(values.username) || cleanText(values.username) || minLength(values.username, 3);\r\n  if (usernameError) {\r\n    errors.username = usernameError;\r\n  }\r\n  let passwordError = required(values.password) || minLength(values.password, 6);\r\n  if (passwordError) {\r\n    errors.password = passwordError;\r\n  }\r\n  let repeatPasswordError = required(values.repeatPassword) || passwordsMatch(values.repeatPassword, values.password);\r\n  if (repeatPasswordError) {\r\n    errors.repeatPassword = repeatPasswordError;\r\n  }\r\n  if (Object.keys(errors).length) {\r\n    return errors;\r\n  }\r\n\r\n  // Async validation\r\n  return check(values)\r\n    .then(() => {})\r\n    .catch(e => {\r\n      let errorsResponse = e && e.response && e.response.data && e.response.data.errors;\r\n      if (!errorsResponse) return {};\r\n      const fields = Object.keys(initialValues);\r\n      for (const key in errorsResponse) {\r\n        if (errorsResponse.hasOwnProperty( key ) ) {\r\n          // if field exists, we will show message under input\r\n          if (fields.includes(key)) {\r\n            errors[key] = errorsResponse[key].message;\r\n          } else { // else we show it in a toast\r\n            toast.error(errorsResponse[key].message)\r\n          }\r\n        }\r\n      }\r\n      if (Object.keys(errorsResponse).length) {\r\n        throw errors;\r\n      }\r\n    });\r\n};\r\n\r\n\r\nexport default function SignupForm () {\r\n  return (\r\n    <div className=\"SignupForm-component\">\r\n      <Formik\r\n        initialValues={initialValues}\r\n        validate={validate}\r\n        validateOnChange={true}\r\n        onSubmit={(values, { setSubmitting }) => {\r\n          signup(values)\r\n            .then(() => {\r\n              toast.success('You were successfully signed up!')\r\n            })\r\n            .catch(e => {\r\n              let errorsResponse = e && e.response && e.response.data && e.response.data.errors;\r\n              // if backend don't return error message we will show some default message\r\n              if (!errorsResponse) {\r\n                toast.error(\"Unexpected error. Please try again later\");\r\n              }\r\n              // if we got error messages\r\n              for (const key in errorsResponse) {\r\n                if (errorsResponse.hasOwnProperty(key)) {\r\n                  toast.error(errorsResponse[key].message);\r\n                }\r\n              }\r\n            })\r\n            .finally(() => setSubmitting(false))\r\n        }}\r\n      >\r\n        {props => {\r\n          const {\r\n            values,\r\n            errors,\r\n            touched,\r\n            isSubmitting,\r\n            handleChange,\r\n            handleSubmit,\r\n          } = props;\r\n          return (\r\n            <form onSubmit={handleSubmit}>\r\n              <TextField\r\n                id=\"email\"\r\n                name=\"email\"\r\n                type=\"email\"\r\n                value={values.email}\r\n                label=\"Email\"\r\n                placeholder=\"Email\"\r\n                onChange={handleChange}\r\n                error={touched.email && errors.email}\r\n              />\r\n\r\n              <TextField\r\n                id=\"username\"\r\n                name=\"username\"\r\n                type=\"text\"\r\n                value={values.username}\r\n                label=\"Choose username\"\r\n                placeholder=\"Username\"\r\n                onChange={handleChange}\r\n                error={touched.username && errors.username}\r\n              />\r\n\r\n              <TextField\r\n                id=\"password\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                value={values.password}\r\n                label=\"Password\"\r\n                placeholder=\"Password\"\r\n                onChange={handleChange}\r\n                error={touched.password && errors.password}\r\n              />\r\n\r\n              <TextField\r\n                id=\"repeatPassword\"\r\n                name=\"repeatPassword\"\r\n                type=\"password\"\r\n                value={values.repeatPassword}\r\n                label=\"Repeat your password\"\r\n                placeholder=\"Repeat your password\"\r\n                onChange={handleChange}\r\n                error={touched.repeatPassword && errors.repeatPassword}\r\n              />\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                disabled={isSubmitting}\r\n                isLoading={isSubmitting}\r\n                block={true}\r\n                className=\"submit\"\r\n              >Sign Up</Button>\r\n\r\n            </form>\r\n          );\r\n        }}\r\n      </Formik>\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport SignupForm from '../signup-form'\r\n\r\n\r\nimport './signup.scss';\r\n\r\n\r\nexport default function Signup () {\r\n  return (\r\n    <div className=\"Signup-component\">\r\n      <div className=\"wrapper\">\r\n        <h2 className=\"title\">Sign Up to Coins.ph!</h2>\r\n        <SignupForm />\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\nimport Signup from './components/signup';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App-component\">\n      <Signup />\n      <ToastContainer autoClose={4000} hideProgressBar={true}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}